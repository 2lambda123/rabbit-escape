package rabbitescape.engine.logic;

import static rabbitescape.engine.util.WorldAssertions.*;

import org.junit.Test;

public class TestBridging
{
    @Test
    public void Bridge_on_the_flat()
    {
        assertWorldEvolvesLike(
            "               " + "\n" +
            "               " + "\n" +
            "               " + "\n" +
            "               " + "\n" +
            " ri         ij " + "\n" +
            "###############",

            "               " + "\n" +
            "               " + "\n" +
            "               " + "\n" +
            "               " + "\n" +
            "  rB       Ej  " + "\n" +
            "###############",

            "               " + "\n" +
            "               " + "\n" +
            "               " + "\n" +
            "               " + "\n" +
            "  r[       ]j  " + "\n" +
            "###############",

            "               " + "\n" +
            "               " + "\n" +
            "               " + "\n" +
            "               " + "\n" +
            "  r{       }j  " + "\n" +
            "###############",

            "               " + "\n" +
            "               " + "\n" +
            "               " + "\n" +
            "    B     E    " + "\n" +
            "   r       j   " + "\n" +
            "###############",

            "               " + "\n" +
            "               " + "\n" +
            "               " + "\n" +
            "    [     ]    " + "\n" +
            "   r       j   " + "\n" +
            "###############",

            "               " + "\n" +
            "               " + "\n" +
            "               " + "\n" +
            "    {     }    " + "\n" +
            "   r       j   " + "\n" +
            "###############",

            "               " + "\n" +
            "               " + "\n" +
            "     B   E     " + "\n" +
            "    r     j    " + "\n" +
            "   (       )   " + "\n" +
            "###############",

            "               " + "\n" +
            "               " + "\n" +
            "     [   ]     " + "\n" +
            "    r     j    " + "\n" +
            "   (       )   " + "\n" +
            "###############",

            "               " + "\n" +
            "               " + "\n" +
            "     {   }     " + "\n" +
            "    r     j    " + "\n" +
            "   (       )   " + "\n" +
            "###############",

            "               " + "\n" +
            "      ' !      " + "\n" +
            "     r   j     " + "\n" +
            "    (     )    " + "\n" +
            "   (       )   " + "\n" +
            "###############",

            "               " + "\n" +
            "      r j      " + "\n" +
            "     (f f)     " + "\n" +
            "    ( f f )    " + "\n" +
            "   (       )   " + "\n" +
            "###############"
        );
    }

    @Test
    public void Bridge_on_an_up_slope()
    {
        assertWorldEvolvesLike(
            "                 " + "\n" +
            "                 " + "\n" +
            "                 " + "\n" +
            "  i           i  " + "\n" +
            "r /           \\ j" + "\n" +
            "#################",

            "                 " + "\n" +
            "                 " + "\n" +
            "                 " + "\n" +
            "                 " + "\n" +
            " r~           `j " + "\n" +
            "#################",

            "                 " + "\n" +
            "                 " + "\n" +
            "                 " + "\n" +
            "   B         E   " + "\n" +
            "  r           j  " + "\n" +
            "#################",

            "                 " + "\n" +
            "                 " + "\n" +
            "                 " + "\n" +
            "   [         ]   " + "\n" +
            "  r           j  " + "\n" +
            "#################",

            "                 " + "\n" +
            "                 " + "\n" +
            "                 " + "\n" +
            "   {         }   " + "\n" +
            "  r           j  " + "\n" +
            "#################",

            "                 " + "\n" +
            "                 " + "\n" +
            "    B       E    " + "\n" +
            "   r         j   " + "\n" +
            "  /           \\  " + "\n" +
            "#################",

            "                 " + "\n" +
            "                 " + "\n" +
            "    [       ]    " + "\n" +
            "   r         j   " + "\n" +
            "  /           \\  " + "\n" +
            "#################",

            "                 " + "\n" +
            "                 " + "\n" +
            "    {       }    " + "\n" +
            "   r         j   " + "\n" +
            "  /           \\  " + "\n" +
            "#################",

            "                 " + "\n" +
            "     B     E     " + "\n" +
            "    r       j    " + "\n" +
            "   (         )   " + "\n" +
            "  /           \\  " + "\n" +
            "#################",

            "                 " + "\n" +
            "     [     ]     " + "\n" +
            "    r       j    " + "\n" +
            "   (         )   " + "\n" +
            "  /           \\  " + "\n" +
            "#################",

            "                 " + "\n" +
            "     {     }     " + "\n" +
            "    r       j    " + "\n" +
            "   (         )   " + "\n" +
            "  /           \\  " + "\n" +
            "#################",

            "      '   !      " + "\n" +
            "     r     j     " + "\n" +
            "    (       )    " + "\n" +
            "   (         )   " + "\n" +
            "  /           \\  " + "\n" +
            "#################",

            "      r   j      " + "\n" +
            "     (f   f)     " + "\n" +
            "    ( f   f )    " + "\n" +
            "   (         )   " + "\n" +
            "  /           \\  " + "\n" +
            "#################"
        );
    }

    @Test
    public void Bridge_on_a_down_slope()
    {
        assertWorldEvolvesLike(
            "                 " + "\n" +
            "                 " + "\n" +
            "                 " + "\n" +
            "ri             ij" + "\n" +
            "#\\             /#" + "\n" +
            "##\\           /##" + "\n" +
            "#################",

            "                 " + "\n" +
            "                 " + "\n" +
            "                 " + "\n" +
            "                 " + "\n" +
            "#rB           Ej#" + "\n" +
            "##\\           /##" + "\n" +
            "#################",

            "                 " + "\n" +
            "                 " + "\n" +
            "                 " + "\n" +
            "                 " + "\n" +
            "#r[           ]j#" + "\n" +
            "##\\           /##" + "\n" +
            "#################",

            "                 " + "\n" +
            "                 " + "\n" +
            "                 " + "\n" +
            "                 " + "\n" +
            "#r{           }j#" + "\n" +
            "##\\           /##" + "\n" +
            "#################",

            "                 " + "\n" +
            "                 " + "\n" +
            "                 " + "\n" +
            "   B         E   " + "\n" +
            "#\\r           j/#" + "\n" +
            "##\\           /##" + "\n" +
            "#################",

            "                 " + "\n" +
            "                 " + "\n" +
            "                 " + "\n" +
            "   [         ]   " + "\n" +
            "#\\r           j/#" + "\n" +
            "##\\           /##" + "\n" +
            "#################",

            "                 " + "\n" +
            "                 " + "\n" +
            "                 " + "\n" +
            "   {         }   " + "\n" +
            "#\\r           j/#" + "\n" +
            "##\\           /##" + "\n" +
            "#################",

            "                 " + "\n" +
            "                 " + "\n" +
            "    B       E    " + "\n" +
            "   r         j   " + "\n" +
            "#\\(           )/#" + "\n" +
            "##\\           /##" + "\n" +
            "#################",

            "                 " + "\n" +
            "                 " + "\n" +
            "    [       ]    " + "\n" +
            "   r         j   " + "\n" +
            "#\\(           )/#" + "\n" +
            "##\\           /##" + "\n" +
            "#################",

            "                 " + "\n" +
            "                 " + "\n" +
            "    {       }    " + "\n" +
            "   r         j   " + "\n" +
            "#\\(           )/#" + "\n" +
            "##\\           /##" + "\n" +
            "#################",

            "                 " + "\n" +
            "     '     !     " + "\n" +
            "    r       j    " + "\n" +
            "   (         )   " + "\n" +
            "#\\(           )/#" + "\n" +
            "##\\           /##" + "\n" +
            "#################",

            "                 " + "\n" +
            "     r     j     " + "\n" +
            "    (f     f)    " + "\n" +
            "   ( f     f )   " + "\n" +
            "#\\(           )/#" + "\n" +
            "##\\           /##" + "\n" +
            "#################"
        );
    }

    @Test
    public void Stop_bridging_when_hit_a_wall()
    {
        assertWorldEvolvesLike(
            "#          #" + "\n" +
            "# ij    ri #" + "\n" +
            "############",

            "#          #" + "\n" +
            "#Ej      rB#" + "\n" +
            "############",

            "#          #" + "\n" +
            "#]j      r[#" + "\n" +
            "############",

            "#          #" + "\n" +
            "#}j      r{#" + "\n" +
            "############",

            "#          #" + "\n" +
            "#|        ?#" + "\n" +
            "############",

            "#          #" + "\n" +
            "#r_      +j#" + "\n" +
            "############",

            "#          #" + "\n" +
            "#)r>    <j(#" + "\n" +
            "############"
        );
    }

    @Test
    public void Dont_stop_bridging_when_2_above_head_at_start()
    {
        assertWorldEvolvesLike(
            "# #      # #" + "\n" +
            "#          #" + "\n" +
            "# ij    ri #" + "\n" +
            "############",

            "# #      # #" + "\n" +
            "#          #" + "\n" +
            "#Ej      rB#" + "\n" +
            "############"
        );
    }

    @Test
    public void Stop_bridging_when_hit_head_here_at_start()
    {
        assertWorldEvolvesLike(
            "# #      # #" + "\n" +
            "# ij    ri #" + "\n" +
            "############",

            "# #      # #" + "\n" +
            "#<j      r>#" + "\n" +
            "############"
        );
    }

    @Test
    public void Stop_bridging_when_hit_head_in_front_at_start()
    {
        assertWorldEvolvesLike(
            "##        ##" + "\n" +
            "# ij    ri #" + "\n" +
            "############",

            "##        ##" + "\n" +
            "#<j      r>#" + "\n" +
            "############"
        );
    }

    @Test
    public void Stop_bridging_when_hit_head_here_later()
    {
        assertWorldEvolvesLike(
            "#  #    #  #" + "\n" +
            "#          #" + "\n" +
            "#   ijri   #" + "\n" +
            "############",

            "#  #    #  #" + "\n" +
            "#          #" + "\n" +
            "#  Ej  rB  #" + "\n" +
            "############",

            "#  #    #  #" + "\n" +
            "#          #" + "\n" +
            "#  ]j  r[  #" + "\n" +
            "############",

            "#  #    #  #" + "\n" +
            "#          #" + "\n" +
            "#  }j  r{  #" + "\n" +
            "############",

            "#  #    #  #" + "\n" +
            "# !      ' #" + "\n" +
            "#  j    r  #" + "\n" +
            "############"
        );
    }

    @Test
    public void Stop_bridging_when_hit_head_in_front_later()
    {
        assertWorldEvolvesLike(
            "# #      # #" + "\n" +
            "#          #" + "\n" +
            "#   ijri   #" + "\n" +
            "############",

            "# #      # #" + "\n" +
            "#          #" + "\n" +
            "#  Ej  rB  #" + "\n" +
            "############",

            "# #      # #" + "\n" +
            "#          #" + "\n" +
            "#  ]j  r[  #" + "\n" +
            "############",

            "# #      # #" + "\n" +
            "#          #" + "\n" +
            "#  }j  r{  #" + "\n" +
            "############",

            "# #      # #" + "\n" +
            "# !      ' #" + "\n" +
            "#  j    r  #" + "\n" +
            "############"
        );
    }

    // TODO: Stop_bridging_when_hit_a_ceiling

    @Test
    public void Stop_bridging_when_skim_a_wall_top()
    {
        assertWorldEvolvesLike(
            "            " + "\n" +
            "#          #" + "\n" +
            "#  ij  ri  #" + "\n" +
            "############",

            "            " + "\n" +
            "#          #" + "\n" +
            "# Ej    rB #" + "\n" +
            "############",

            "            " + "\n" +
            "#          #" + "\n" +
            "# ]j    r[ #" + "\n" +
            "############",

            "            " + "\n" +
            "#          #" + "\n" +
            "# }j    r{ #" + "\n" +
            "############",

            "            " + "\n" +
            "#E        B#" + "\n" +
            "# j      r #" + "\n" +
            "############",

            "            " + "\n" +
            "#]        [#" + "\n" +
            "# j      r #" + "\n" +
            "############",

            "            " + "\n" +
            "#}        {#" + "\n" +
            "# j      r #" + "\n" +
            "############",

            "!          '" + "\n" +
            "#j        r#" + "\n" +
            "# )      ( #" + "\n" +
            "############"
        );
    }

    @Test
    public void Stop_bridging_when_join_opposite_bridge_long()
    {
        assertWorldEvolvesLike(
            "#   (   )   #" + "\n" +
            "#  (     )  #" + "\n" +
            "# ( ij ri ) #" + "\n" +
            "#############",

            "#   (   )   #" + "\n" +
            "#  (     )  #" + "\n" +
            "# (Ej   rB) #" + "\n" +
            "#############",

            "#   (   )   #" + "\n" +
            "#  (     )  #" + "\n" +
            "# (]j   r[) #" + "\n" +
            "#############",

            "#   (   )   #" + "\n" +
            "#  (     )  #" + "\n" +
            "# (}j   r{) #" + "\n" +
            "#############",

            "#   (   )   #" + "\n" +
            "#  (     )  #" + "\n" +
            "# *j     r& #" + "\n" +
            "#############"
        );
    }

    @Test
    public void Stop_bridging_and_turn_when_hit_back_slope()
    {
        assertWorldEvolvesLike(
            "#   /   \\   #" + "\n" +
            "#  /     \\  #" + "\n" +
            "# / ij ri \\ #" + "\n" +
            "#############",

            "#   /   \\   #" + "\n" +
            "#  /     \\  #" + "\n" +
            "# /<j   r>\\ #" + "\n" +
            "#############",

            "#   /   \\   #" + "\n" +
            "#  /     \\  #" + "\n" +
            "# /|     ?\\ #" + "\n" +
            "#############"
        );
    }

    @Test
    public void Stop_bridging_and_turn_when_hit_back_slope_later()
    {
        assertWorldEvolvesLike(
            "#   /       \\   #" + "\n" +
            "#  /         \\  #" + "\n" +
            "# /   ij ri   \\ #" + "\n" +
            "#################",

            "#   /       \\   #" + "\n" +
            "#  /         \\  #" + "\n" +
            "# /  Ej   rB  \\ #" + "\n" +
            "#################",

            "#   /       \\   #" + "\n" +
            "#  /         \\  #" + "\n" +
            "# /  ]j   r[  \\ #" + "\n" +
            "#################",

            "#   /       \\   #" + "\n" +
            "#  /         \\  #" + "\n" +
            "# /  }j   r{  \\ #" + "\n" +
            "#################",

            "#   /       \\   #" + "\n" +
            "#  /!       '\\  #" + "\n" +
            "# /  j     r  \\ #" + "\n" +
            "#################"
        );
    }

    @Test
    public void Stop_bridging_when_join_opposite_bridge_short()
    {
        assertWorldEvolvesLike(
            "#           #" + "\n" +
            "# ( ij ri ) #" + "\n" +
            "#############",

            "#           #" + "\n" +
            "# (Ej   rB) #" + "\n" +
            "#############",

            "#           #" + "\n" +
            "# (]j   r[) #" + "\n" +
            "#############",

            "#           #" + "\n" +
            "# (}j   r{) #" + "\n" +
            "#############",

            "#           #" + "\n" +
            "# *j     r& #" + "\n" +
            "#############"
        );
    }

    @Test
    public void Stop_bridging_when_join_opposite_bridge_long_later()
    {
        assertWorldEvolvesLike(
            "#   (       )   #" + "\n" +
            "#  (         )  #" + "\n" +
            "# (   ij ri   ) #" + "\n" +
            "#################",

            "#   (       )   #" + "\n" +
            "#  (         )  #" + "\n" +
            "# (  Ej   rB  ) #" + "\n" +
            "#################",

            "#   (       )   #" + "\n" +
            "#  (         )  #" + "\n" +
            "# (  ]j   r[  ) #" + "\n" +
            "#################",

            "#   (       )   #" + "\n" +
            "#  (         )  #" + "\n" +
            "# (  }j   r{  ) #" + "\n" +
            "#################",

            "#   (       )   #" + "\n" +
            "#  (E       B)  #" + "\n" +
            "# (  j     r  ) #" + "\n" +
            "#################",

            "#   (       )   #" + "\n" +
            "#  (]       [)  #" + "\n" +
            "# (  j     r  ) #" + "\n" +
            "#################",

            "#   (       )   #" + "\n" +
            "#  (}       {)  #" + "\n" +
            "# (  j     r  ) #" + "\n" +
            "#################",

            "#   (       )   #" + "\n" +
            "#  *j       r&  #" + "\n" +
            "# (  )     (  ) #" + "\n" +
            "#################"
        );
    }

    @Test
    public void Stop_bridging_when_offset_join_opposite_bridge_long_later()
    {
        assertWorldEvolvesLike(
            "#   (    )   #" + "\n" +
            "#  (      )  #" + "\n" +
            "# (  ijri  ) #" + "\n" +
            "##############",

            "#   (    )   #" + "\n" +
            "#  (      )  #" + "\n" +
            "# ( Ej  rB ) #" + "\n" +
            "##############",

            "#   (    )   #" + "\n" +
            "#  (      )  #" + "\n" +
            "# ( ]j  r[ ) #" + "\n" +
            "##############",

            "#   (    )   #" + "\n" +
            "#  (      )  #" + "\n" +
            "# ( }j  r{ ) #" + "\n" +
            "##############",

            // Build a bridge and leave an annoying gap
            "#   (    )   #" + "\n" +
            "#  !      '  #" + "\n" +
            "# ( j    r ) #" + "\n" +
            "##############",

            "#   (    )   #" + "\n" +
            "#  j      r  #" + "\n" +
            "# (f)    (f) #" + "\n" +
            "##############"
        );
    }

    @Test
    public void Stop_bridging_when_join_opposite_bridge_short_later()
    {
        assertWorldEvolvesLike(
            "#              #" + "\n" +
            "#  (        )  #" + "\n" +
            "# (   ijri   ) #" + "\n" +
            "################",

            "#              #" + "\n" +
            "#  (        )  #" + "\n" +
            "# (  Ej  rB  ) #" + "\n" +
            "################",

            "#              #" + "\n" +
            "#  (        )  #" + "\n" +
            "# (  ]j  r[  ) #" + "\n" +
            "################",

            "#              #" + "\n" +
            "#  (        )  #" + "\n" +
            "# (  }j  r{  ) #" + "\n" +
            "################",

            "#              #" + "\n" +
            "#  (E      B)  #" + "\n" +
            "# (  j    r  ) #" + "\n" +
            "################",

            "#              #" + "\n" +
            "#  (]      [)  #" + "\n" +
            "# (  j    r  ) #" + "\n" +
            "################",

            "#              #" + "\n" +
            "#  (}      {)  #" + "\n" +
            "# (  j    r  ) #" + "\n" +
            "################",

            "#              #" + "\n" +
            "#  *j      r&  #" + "\n" +
            "# (  )    (  ) #" + "\n" +
            "################"
        );
    }

    @Test
    public void Walker_immediately_behind_bridger_continues_past()
    {
        assertWorldEvolvesLike(
            "#       #" + "\n" +
            "#       #" + "\n" +
            "#       #" + "\n" +
            "#rri    #" + "\n" +
            "#########",

            "#       #" + "\n" +
            "#       #" + "\n" +
            "#       #" + "\n" +
            "# r>B   #" + "\n" +
            "#########",

            "#       #" + "\n" +
            "#       #" + "\n" +
            "#       #" + "\n" +
            "#  r[   #" + "\n" +
            "#########",

            "#       #" + "\n" +
            "#       #" + "\n" +
            "#       #" + "\n" +
            "#  r{>  #" + "\n" +
            "#########",

            "#       #" + "\n" +
            "#       #" + "\n" +
            "#    B  #" + "\n" +
            "#   rr> #" + "\n" +
            "#########"
        );
    }

    @Test
    public void Walker_2_behind_bridger_continues_past()
    {
        assertWorldEvolvesLike(
            "#       #" + "\n" +
            "#       #" + "\n" +
            "#       #" + "\n" +
            "#r ri   #" + "\n" +
            "#########",

            "#       #" + "\n" +
            "#       #" + "\n" +
            "#       #" + "\n" +
            "# r>rB  #" + "\n" +
            "#########",

            "#       #" + "\n" +
            "#       #" + "\n" +
            "#       #" + "\n" +
            "#  r>[  #" + "\n" +
            "#########",

            "#       #" + "\n" +
            "#       #" + "\n" +
            "#       #" + "\n" +
            "#   r{  #" + "\n" +
            "#########",

            "#       #" + "\n" +
            "#       #" + "\n" +
            "#     B #" + "\n" +
            "#    r> #" + "\n" +
            "#########",

            "#       #" + "\n" +
            "#       #" + "\n" +
            "#     [ #" + "\n" +
            "#    rr>#" + "\n" +
            "#########"
        );
    }

    @Test
    public void Walker_3_behind_bridger_climbs_and_falls()
    {
        assertWorldEvolvesLike(
            "#         #" + "\n" +
            "#         #" + "\n" +
            "#         #" + "\n" +
            "#r  ri    #" + "\n" +
            "###########",

            "#         #" + "\n" +
            "#         #" + "\n" +
            "#         #" + "\n" +
            "# r> rB   #" + "\n" +
            "###########",

            "#         #" + "\n" +
            "#         #" + "\n" +
            "#         #" + "\n" +
            "#  r>r[   #" + "\n" +
            "###########",

            "#         #" + "\n" +
            "#         #" + "\n" +
            "#         #" + "\n" +
            "#   r>{   #" + "\n" +
            "###########",

            "#         #" + "\n" +
            "#         #" + "\n" +
            "#      B  #" + "\n" +
            "#    r~   #" + "\n" + // Climbs on
            "###########",

            "#         #" + "\n" +
            "#         #" + "\n" +
            "#      [  #" + "\n" +
            "#     r   #" + "\n" + // Jumps off end
            "###########",

            "#         #" + "\n" +
            "#         #" + "\n" +
            "#      {  #" + "\n" +
            "#     rf  #" + "\n" + // Falls
            "###########",

            "#         #" + "\n" +
            "#       B #" + "\n" +
            "#      r  #" + "\n" +
            "#     (r> #" + "\n" + // Walks away
            "###########"
        );
    }

    @Test
    public void Walker_4_behind_bridger_climbs_and_falls()
    {
        assertWorldEvolvesLike(
            "#          #" + "\n" +
            "#          #" + "\n" +
            "#          #" + "\n" +
            "#r   ri    #" + "\n" +
            "############",

            "#          #" + "\n" +
            "#          #" + "\n" +
            "#          #" + "\n" +
            "# r>  rB   #" + "\n" +
            "############",

            "#          #" + "\n" +
            "#          #" + "\n" +
            "#          #" + "\n" +
            "#  r> r[   #" + "\n" +
            "############",

            "#          #" + "\n" +
            "#          #" + "\n" +
            "#          #" + "\n" +
            "#   r>r{   #" + "\n" +
            "############",

            "#          #" + "\n" +
            "#          #" + "\n" +
            "#       B  #" + "\n" +
            "#    r>r   #" + "\n" +
            "############",

            "#          #" + "\n" +
            "#          #" + "\n" +
            "#       [  #" + "\n" +
            "#     r~   #" + "\n" + // Climbs on
            "############",

            "#          #" + "\n" +
            "#          #" + "\n" +
            "#       {  #" + "\n" +
            "#      r   #" + "\n" + // Jumps off end
            "############",

            "#          #" + "\n" +
            "#        B #" + "\n" +
            "#       r  #" + "\n" +
            "#      (f  #" + "\n" + // Falls
            "############",

            "#          #" + "\n" +
            "#        [ #" + "\n" +
            "#       r  #" + "\n" +
            "#      (r> #" + "\n" + // Walks away
            "############"
        );
    }

    @Test
    public void Bridge_token_next_to_wall_makes_you_bridge_away_from_it()
    {
        assertWorldEvolvesLike(
            "#      #" + "\n" +
            "#      #" + "\n" +
            "#      #" + "\n" +
            "#    ri#" + "\n" +
            "########",

            "#      #" + "\n" +
            "#      #" + "\n" +
            "#      #" + "\n" +
            "#     E#" + "\n" +
            "########",

            "#      #" + "\n" +
            "#      #" + "\n" +
            "#      #" + "\n" +
            "#     ]#" + "\n" +
            "########",

            "#      #" + "\n" +
            "#      #" + "\n" +
            "#      #" + "\n" +
            "#     }#" + "\n" +
            "########",

            "#      #" + "\n" +
            "#      #" + "\n" +
            "#    E #" + "\n" +
            "#     j#" + "\n" +
            "########",

            "#      #" + "\n" +
            "#      #" + "\n" +
            "#    ] #" + "\n" +
            "#     j#" + "\n" +
            "########",

            "#      #" + "\n" +
            "#      #" + "\n" +
            "#    } #" + "\n" +
            "#     j#" + "\n" +
            "########",

            "#      #" + "\n" +
            "#   E  #" + "\n" +
            "#    j #" + "\n" +
            "#     )#" + "\n" +
            "########",

            "#      #" + "\n" +
            "#   ]  #" + "\n" +
            "#    j #" + "\n" +
            "#     )#" + "\n" +
            "########",

            "#      #" + "\n" +
            "#   }  #" + "\n" +
            "#    j #" + "\n" +
            "#     )#" + "\n" +
            "########",

            "#  !   #" + "\n" +
            "#   j  #" + "\n" +
            "#    ) #" + "\n" +
            "#     )#" + "\n" +
            "########",

            "#  j   #" + "\n" +
            "#  f)  #" + "\n" +
            "#  f ) #" + "\n" +
            "#     )#" + "\n" +
            "########"
        );
    }

    @Test
    public void Bridge_token_next_to_back_slope_makes_you_bridge_away_from_it()
    {
        assertWorldEvolvesLike(
            "           " + "\n" +
            "           " + "\n" +
            "           " + "\n" +
            "/ij     ri)" + "\n" +
            "###########",

            "           " + "\n" +
            "           " + "\n" +
            "           " + "\n" +
            "/B       E)" + "\n" +
            "###########",

            "           " + "\n" +
            "           " + "\n" +
            "           " + "\n" +
            "/[       ])" + "\n" +
            "###########",

            "           " + "\n" +
            "           " + "\n" +
            "           " + "\n" +
            "/{       })" + "\n" +
            "###########",

            "           " + "\n" +
            "           " + "\n" +
            "  B     E  " + "\n" +
            "/r       j)" + "\n" +
            "###########",

            "           " + "\n" +
            "           " + "\n" +
            "  [     ]  " + "\n" +
            "/r       j)" + "\n" +
            "###########",

            "           " + "\n" +
            "           " + "\n" +
            "  {     }  " + "\n" +
            "/r       j)" + "\n" +
            "###########",

            "           " + "\n" +
            "   B   E   " + "\n" +
            "  r     j  " + "\n" +
            "/(       ))" + "\n" +
            "###########",

            "           " + "\n" +
            "   [   ]   " + "\n" +
            "  r     j  " + "\n" +
            "/(       ))" + "\n" +
            "###########",

            "           " + "\n" +
            "   {   }   " + "\n" +
            "  r     j  " + "\n" +
            "/(       ))" + "\n" +
            "###########",

            "    ' !    " + "\n" +
            "   r   j   " + "\n" +
            "  (     )  " + "\n" +
            "/(       ))" + "\n" +
            "###########",

            "    r j    " + "\n" +
            "   (f f)   " + "\n" +
            "  ( f f )  " + "\n" +
            "/(       ))" + "\n" +
            "###########"
        );
    }
}
